//
//  FirestoreVocabularyManager.swift
//  Ferin
//
//  Created by Bankin ALO on 31.05.25.
//

import Foundation
import FirebaseFirestore

// MARK: - Data Models for Firestore
struct VocabularyCategory: Codable, Identifiable {
    var id: String
    let englishTitle: String
    let kurdishTitle: String
    let emoji: String
    let createdAt: Date
    let sortOrder: Int
    
    init(id: String, englishTitle: String, kurdishTitle: String, emoji: String, sortOrder: Int) {
        self.id = id
        self.englishTitle = englishTitle
        self.kurdishTitle = kurdishTitle
        self.emoji = emoji
        self.createdAt = Date()
        self.sortOrder = sortOrder
    }
}

struct VocabularySubcategory: Codable, Identifiable {
    var id: String
    let englishTitle: String
    let kurdishTitle: String
    let categoryId: String
    let createdAt: Date
    let sortOrder: Int
    
    init(id: String, englishTitle: String, kurdishTitle: String, categoryId: String, sortOrder: Int) {
        self.id = id
        self.englishTitle = englishTitle
        self.kurdishTitle = kurdishTitle
        self.categoryId = categoryId
        self.createdAt = Date()
        self.sortOrder = sortOrder
    }
}

struct VocabularyEntry: Codable, Identifiable {
    var id: String
    let english: String
    let arabic: String
    let kurdish: String
    let gender: String? // "masculine", "feminine", "neuter", or nil
    let pronunciation: String? // Optional phonetic pronunciation
    let categoryId: String
    let subcategoryId: String
    let difficulty: String // "beginner", "intermediate", "advanced"
    let createdAt: Date
    let isCommon: Bool // Whether this is a commonly used word
    
    init(id: String = UUID().uuidString, english: String, arabic: String, kurdish: String, gender: String? = nil, 
         pronunciation: String? = nil, categoryId: String, subcategoryId: String, 
         difficulty: String = "beginner", isCommon: Bool = true) {
        self.id = id
        self.english = english
        self.arabic = arabic
        self.kurdish = kurdish
        self.gender = gender
        self.pronunciation = pronunciation
        self.categoryId = categoryId
        self.subcategoryId = subcategoryId
        self.difficulty = difficulty
        self.createdAt = Date()
        self.isCommon = isCommon
    }
    
    // Convenience method for learning language support
    func translation(for learningLanguage: LearningLanguageManager.LearningLanguage) -> String {
        switch learningLanguage {
        case .english: return english
        case .arabic: return arabic
        }
    }
}

// MARK: - Vocabulary Data for Upload
struct VocabularyData {
    let english: String
    let arabic: String
    let kurdish: String
    let gender: String?
    let pronunciation: String?
    let difficulty: String
    let isCommon: Bool
    
    init(english: String, arabic: String, kurdish: String, gender: String? = nil, pronunciation: String? = nil, difficulty: String = "beginner", isCommon: Bool = true) {
        self.english = english
        self.arabic = arabic
        self.kurdish = kurdish
        self.gender = gender
        self.pronunciation = pronunciation
        self.difficulty = difficulty
        self.isCommon = isCommon
    }
}

// MARK: - Lesson Entry Data Structure
struct LessonEntry: Codable, Identifiable {
    var id: String
    let kurdishWord: String
    let englishWord: String
    let arabicWord: String
    let kurdishExample: String
    let englishExample: String
    let arabicExample: String
    let imageUrl: String
    let type: String
    let createdAt: Date
    
    init(id: String = UUID().uuidString, kurdishWord: String, englishWord: String, arabicWord: String,
         kurdishExample: String, englishExample: String, arabicExample: String, imageUrl: String = "", type: String = "lesson") {
        self.id = id
        self.kurdishWord = kurdishWord
        self.englishWord = englishWord
        self.arabicWord = arabicWord
        self.kurdishExample = kurdishExample
        self.englishExample = englishExample
        self.arabicExample = arabicExample
        self.imageUrl = imageUrl
        self.type = type
        self.createdAt = Date()
    }
    
    // Convenience methods for learning language support
    func translation(for learningLanguage: LearningLanguageManager.LearningLanguage) -> String {
        switch learningLanguage {
        case .english: return englishWord
        case .arabic: return arabicWord
        }
    }
    
    func example(for learningLanguage: LearningLanguageManager.LearningLanguage) -> String {
        switch learningLanguage {
        case .english: return englishExample
        case .arabic: return arabicExample
        }
    }
}

// MARK: - Family Member Lesson Data
struct FamilyMemberLesson {
    let kurdishWord: String
    let englishWord: String
    let arabicWord: String
    let kurdishExample: String
    let englishExample: String
    let arabicExample: String
    
    init(kurdishWord: String, englishWord: String, arabicWord: String, kurdishExample: String, englishExample: String, arabicExample: String) {
        self.kurdishWord = kurdishWord
        self.englishWord = englishWord
        self.arabicWord = arabicWord
        self.kurdishExample = kurdishExample
        self.englishExample = englishExample
        self.arabicExample = arabicExample
    }
    
    // Convenience methods for learning language support
    func translation(for learningLanguage: LearningLanguageManager.LearningLanguage) -> String {
        switch learningLanguage {
        case .english: return englishWord
        case .arabic: return arabicWord
        }
    }
    
    func example(for learningLanguage: LearningLanguageManager.LearningLanguage) -> String {
        switch learningLanguage {
        case .english: return englishExample
        case .arabic: return arabicExample
        }
    }
}

// MARK: - Firestore Vocabulary Manager
@MainActor
class FirestoreVocabularyManager: ObservableObject {
    private let db = Firestore.firestore()
    
    // MARK: - Database Setup Functions
    
    /// Creates the initial category structure in Firestore
    func setupInitialCategories() async throws {
        let categories = [
            VocabularyCategory(id: "people_relationships", englishTitle: "People & Relationships", kurdishTitle: "Meriv √ª t√™kil√Æ", emoji: "üë®‚Äçüë©‚Äçüëß‚Äçüë¶", sortOrder: 1),
            VocabularyCategory(id: "health_body", englishTitle: "Health & Body", kurdishTitle: "Beden √ª tendurist√Æ", emoji: "üß†", sortOrder: 2),
            VocabularyCategory(id: "clothing_accessories", englishTitle: "Clothing & Accessories", kurdishTitle: "Kinc √ª akses√ªwar", emoji: "üëï", sortOrder: 3),
            VocabularyCategory(id: "home_living", englishTitle: "Home & Living", kurdishTitle: "Xan√Æ / Mal", emoji: "üè†", sortOrder: 4),
            VocabularyCategory(id: "food_cooking", englishTitle: "Food & Cooking", kurdishTitle: "Xwarin √ª pijandin", emoji: "üçé", sortOrder: 5),
            VocabularyCategory(id: "in_city", englishTitle: "In the City", kurdishTitle: "Li bajar", emoji: "üèôÔ∏è", sortOrder: 6),
            VocabularyCategory(id: "transport", englishTitle: "Transport", kurdishTitle: "Hat√ª√ß√ª / Traf√Æk", emoji: "üöó", sortOrder: 7),
            VocabularyCategory(id: "school_work", englishTitle: "School & Work", kurdishTitle: "Xwendegeh √ª kar", emoji: "üè´", sortOrder: 8),
            VocabularyCategory(id: "communication", englishTitle: "Communication", kurdishTitle: "Ragihandin", emoji: "üì°", sortOrder: 9),
            VocabularyCategory(id: "free_time_sports", englishTitle: "Free Time & Sports", kurdishTitle: "Dema vala √ª spor", emoji: "‚öΩ", sortOrder: 10),
            VocabularyCategory(id: "world_nature", englishTitle: "World & Nature", kurdishTitle: "C√Æhan √ª xweza", emoji: "üåç", sortOrder: 11),
            VocabularyCategory(id: "numbers_measures", englishTitle: "Numbers & Measures", kurdishTitle: "Hejmara √ª mezinah√Æ", emoji: "üî¢", sortOrder: 12)
        ]
        
        for category in categories {
            do {
                let encoder = Firestore.Encoder()
                let data = try encoder.encode(category)
                try await db.collection("categories").document(category.id).setData(data)
            } catch {
                print("Error encoding category: \(error)")
                throw error
            }
        }
        
        print("‚úÖ Created \(categories.count) categories successfully")
    }
    
    /// Creates subcategories for People & Relationships
    func setupPeopleRelationshipsSubcategories() async throws {
        let subcategories = [
            VocabularySubcategory(id: "family_relationships", englishTitle: "Family Relationships", kurdishTitle: "T√™kiliy√™n merivay√Æ/eqrebat√Æ", categoryId: "people_relationships", sortOrder: 1),
            VocabularySubcategory(id: "greetings", englishTitle: "Greetings", kurdishTitle: "Silav √ª p√Ærozbayek", categoryId: "people_relationships", sortOrder: 2),
            VocabularySubcategory(id: "emotions", englishTitle: "Emotions", kurdishTitle: "Hest √ª sewq", categoryId: "people_relationships", sortOrder: 3),
            VocabularySubcategory(id: "personality", englishTitle: "Personality", kurdishTitle: "Kesayet√Æ", categoryId: "people_relationships", sortOrder: 4),
            VocabularySubcategory(id: "social_interactions", englishTitle: "Social Interactions", kurdishTitle: "T√™kiliy√™n civak√Æ", categoryId: "people_relationships", sortOrder: 5),
            VocabularySubcategory(id: "introductions", englishTitle: "Introductions", kurdishTitle: "Nasandin", categoryId: "people_relationships", sortOrder: 6)
        ]
        
        for subcategory in subcategories {
            do {
                let encoder = Firestore.Encoder()
                let data = try encoder.encode(subcategory)
                try await db.collection("categories")
                    .document("people_relationships")
                    .collection("subcategories")
                    .document(subcategory.id)
                    .setData(data)
            } catch {
                print("Error encoding subcategory: \(error)")
                throw error
            }
        }
        
        print("‚úÖ Created \(subcategories.count) subcategories for People & Relationships")
    }
    
    // MARK: - Vocabulary Upload Functions
    
    /// Uploads vocabulary entries for a specific category and subcategory
    func uploadVocabulary(categoryId: String, subcategoryId: String, vocabularyList: [VocabularyData]) async throws {
        let batch = db.batch()
        
        for vocabData in vocabularyList {
            let vocabEntry = VocabularyEntry(
                english: vocabData.english,
                arabic: vocabData.arabic,
                kurdish: vocabData.kurdish,
                gender: vocabData.gender,
                pronunciation: vocabData.pronunciation,
                categoryId: categoryId,
                subcategoryId: subcategoryId,
                difficulty: vocabData.difficulty,
                isCommon: vocabData.isCommon
            )
            
            let docRef = db.collection("categories")
                .document(categoryId)
                .collection("subcategories")
                .document(subcategoryId)
                .collection("vocabulary")
                .document(vocabEntry.id)
            
            do {
                let encoder = Firestore.Encoder()
                let data = try encoder.encode(vocabEntry)
                batch.setData(data, forDocument: docRef)
            } catch {
                print("Error encoding vocabulary entry: \(error)")
                throw error
            }
        }
        
        try await batch.commit()
        print("‚úÖ Uploaded \(vocabularyList.count) vocabulary entries to \(categoryId)/\(subcategoryId)")
    }
    
    // MARK: - Predefined Vocabulary Data
    
    /// Family Relationships vocabulary for immediate upload
    func getFamilyRelationshipsVocabulary() -> [VocabularyData] {
        return [
            VocabularyData(english: "father", arabic: "ÿßŸÑÿ£ÿ®", kurdish: "bav", gender: "masculine", pronunciation: "bahv"),
            VocabularyData(english: "mother", arabic: "ÿßŸÑÿ£ŸÖ", kurdish: "dayik", gender: "feminine", pronunciation: "dah-yik"),
            VocabularyData(english: "son", arabic: "ÿßŸÑÿßÿ®ŸÜ", kurdish: "kur", gender: "masculine", pronunciation: "koor"),
            VocabularyData(english: "daughter", arabic: "ÿßŸÑÿßÿ®ŸÜÿ©", kurdish: "ke√ß", gender: "feminine", pronunciation: "kech"),
            VocabularyData(english: "brother", arabic: "ÿßŸÑÿ£ÿÆ", kurdish: "bira", gender: "masculine", pronunciation: "bee-rah"),
            VocabularyData(english: "sister", arabic: "ÿßŸÑÿ£ÿÆÿ™", kurdish: "xwi≈ük", gender: "feminine", pronunciation: "khwishk"),
            VocabularyData(english: "grandfather", arabic: "ÿßŸÑÿ¨ÿØ", kurdish: "bap√Ær", gender: "masculine", pronunciation: "bah-peer"),
            VocabularyData(english: "grandmother", arabic: "ÿßŸÑÿ¨ÿØÿ©", kurdish: "dap√Ær", gender: "feminine", pronunciation: "dah-peer"),
            VocabularyData(english: "uncle", arabic: "ÿßŸÑÿπŸÖ", kurdish: "mam", gender: "masculine", pronunciation: "mahm"),
            VocabularyData(english: "aunt", arabic: "ÿßŸÑÿπŸÖÿ©", kurdish: "xal", gender: "feminine", pronunciation: "khal"),
            VocabularyData(english: "cousin (male)", arabic: "ÿßÿ®ŸÜ ÿßŸÑÿπŸÖ", kurdish: "kur√™ mam", gender: "masculine", pronunciation: "koo-reh mahm"),
            VocabularyData(english: "cousin (female)", arabic: "ÿ®ŸÜÿ™ ÿßŸÑÿπŸÖ", kurdish: "ke√ßa mam", gender: "feminine", pronunciation: "keh-cha mahm"),
            VocabularyData(english: "husband", arabic: "ÿßŸÑÿ≤Ÿàÿ¨", kurdish: "m√™r", gender: "masculine", pronunciation: "mair"),
            VocabularyData(english: "wife", arabic: "ÿßŸÑÿ≤Ÿàÿ¨ÿ©", kurdish: "jin", gender: "feminine", pronunciation: "zheen"),
            VocabularyData(english: "family", arabic: "ÿßŸÑÿπÿßÿ¶ŸÑÿ©", kurdish: "malbat", gender: nil, pronunciation: "mahl-baht"),
            VocabularyData(english: "parents", arabic: "ÿßŸÑŸàÿßŸÑÿØÿßŸÜ", kurdish: "d√™ √ª bav", gender: nil, pronunciation: "day oo bahv"),
            VocabularyData(english: "children", arabic: "ÿßŸÑÿ£ÿ∑ŸÅÿßŸÑ", kurdish: "zarok", gender: nil, pronunciation: "zah-rohk"),
            VocabularyData(english: "relatives", arabic: "ÿßŸÑÿ£ŸÇÿßÿ±ÿ®", kurdish: "eqrebat", gender: nil, pronunciation: "eh-kreh-baht"),
            VocabularyData(english: "nephew", arabic: "ÿßÿ®ŸÜ ÿßŸÑÿ£ÿÆ", kurdish: "kur√™ bira", gender: "masculine", pronunciation: "koo-reh bee-rah"),
            VocabularyData(english: "niece", arabic: "ÿ®ŸÜÿ™ ÿßŸÑÿ£ÿÆÿ™", kurdish: "ke√ßa bira", gender: "feminine", pronunciation: "keh-cha bee-rah")
        ]
    }
    
    // MARK: - Family Members Lesson Data
    
    /// Family Members vocabulary lessons for upload
    func getFamilyMembersLessons() -> [FamilyMemberLesson] {
        return [
            FamilyMemberLesson(
                kurdishWord: "bav",
                englishWord: "Father",
                arabicWord: "ÿßŸÑÿ£ÿ®",
                kurdishExample: "Bav√™ min kar dike.",
                englishExample: "My father is working.",
                arabicExample: "ŸàÿßŸÑÿØŸä ŸäÿπŸÖŸÑ."
            ),
            FamilyMemberLesson(
                kurdishWord: "d√™/dayika",
                englishWord: "Mother",
                arabicWord: "ÿßŸÑÿ£ŸÖ",
                kurdishExample: "Dayika min xwarin√™ √ß√™kir.",
                englishExample: "My mother cooked food.",
                arabicExample: "ŸàÿßŸÑÿØÿ™Ÿä ÿ∑ÿ®ÿÆÿ™ ÿßŸÑÿ∑ÿπÿßŸÖ."
            ),
            FamilyMemberLesson(
                kurdishWord: "kurmet",
                englishWord: "Cousin (male)",
                arabicWord: "ÿßÿ®ŸÜ ÿßŸÑÿπŸÖ",
                kurdishExample: "Kurmeta min li dibistanek√™ dixw√Æne.",
                englishExample: "My cousin studies at a school.",
                arabicExample: "ÿßÿ®ŸÜ ÿπŸÖŸä ŸäÿØÿ±ÿ≥ ŸÅŸä ÿßŸÑŸÖÿØÿ±ÿ≥ÿ©."
            ),
            FamilyMemberLesson(
                kurdishWord: "xwi≈ük",
                englishWord: "Sister",
                arabicWord: "ÿßŸÑÿ£ÿÆÿ™",
                kurdishExample: "Ez bi xwi≈üka xwe re bazdikevim.",
                englishExample: "I run with my sister.",
                arabicExample: "ÿ£ÿ±ŸÉÿ∂ ŸÖÿπ ÿ£ÿÆÿ™Ÿä."
            ),
            FamilyMemberLesson(
                kurdishWord: "bira",
                englishWord: "Brother",
                arabicWord: "ÿßŸÑÿ£ÿÆ",
                kurdishExample: "Biray√™ min bi√ß√ªktir e.",
                englishExample: "My brother is younger.",
                arabicExample: "ÿ£ÿÆŸä ÿ£ÿµÿ∫ÿ±."
            ),
            FamilyMemberLesson(
                kurdishWord: "dap√Ær",
                englishWord: "Grandmother",
                arabicWord: "ÿßŸÑÿ¨ÿØÿ©",
                kurdishExample: "Dap√Æra min ji √ßay√™ hez dike.",
                englishExample: "My grandmother loves tea.",
                arabicExample: "ÿ¨ÿØÿ™Ÿä ÿ™ÿ≠ÿ® ÿßŸÑÿ¥ÿßŸä."
            ),
            FamilyMemberLesson(
                kurdishWord: "bap√Ær",
                englishWord: "Grandfather",
                arabicWord: "ÿßŸÑÿ¨ÿØ",
                kurdishExample: "Bap√Æra min li baj√™r dij√Æ.",
                englishExample: "My grandfather lives in the city.",
                arabicExample: "ÿ¨ÿØŸä ŸäÿπŸäÿ¥ ŸÅŸä ÿßŸÑŸÖÿØŸäŸÜÿ©."
            ),
            FamilyMemberLesson(
                kurdishWord: "dotmam/ke√ßap",
                englishWord: "Cousin (female)",
                arabicWord: "ÿ®ŸÜÿ™ ÿßŸÑÿπŸÖ",
                kurdishExample: "Dotmama min li Efr√Æn√™ dij√Æ.",
                englishExample: "My female cousin lives in Afrin.",
                arabicExample: "ÿ®ŸÜÿ™ ÿπŸÖŸä ÿ™ÿπŸäÿ¥ ŸÅŸä ÿπŸÅÿ±ŸäŸÜ."
            ),
            FamilyMemberLesson(
                kurdishWord: "met/xalt√Æk",
                englishWord: "Aunt",
                arabicWord: "ÿßŸÑÿπŸÖÿ©",
                kurdishExample: "Meta min qehwe √ß√™kir.",
                englishExample: "My aunt made coffee.",
                arabicExample: "ÿπŸÖÿ™Ÿä ÿµŸÜÿπÿ™ ÿßŸÑŸÇŸáŸàÿ©."
            ),
            FamilyMemberLesson(
                kurdishWord: "ap/mam",
                englishWord: "Uncle",
                arabicWord: "ÿßŸÑÿπŸÖ",
                kurdishExample: "Xal√™ min ji xwendina pirt√ªkan hez dike.",
                englishExample: "My uncle loves reading books.",
                arabicExample: "ÿπŸÖŸä Ÿäÿ≠ÿ® ŸÇÿ±ÿßÿ°ÿ© ÿßŸÑŸÉÿ™ÿ®."
            ),
            FamilyMemberLesson(
                kurdishWord: "hevj√Æn/hevaljin",
                englishWord: "Partner / Spouse",
                arabicWord: "ÿßŸÑÿ¥ÿ±ŸäŸÉ",
                kurdishExample: "Hevaljina min bi min re di√ße bazar√™.",
                englishExample: "My partner goes to the market with me.",
                arabicExample: "ÿ¥ÿ±ŸäŸÉŸä Ÿäÿ∞Ÿáÿ® ÿ•ŸÑŸâ ÿßŸÑÿ≥ŸàŸÇ ŸÖÿπŸä."
            ),
            FamilyMemberLesson(
                kurdishWord: "kur/law",
                englishWord: "Son",
                arabicWord: "ÿßŸÑÿßÿ®ŸÜ",
                kurdishExample: "Kur√™ min ji f√ªtbol√™ hez dike.",
                englishExample: "My son loves football.",
                arabicExample: "ÿßÿ®ŸÜŸä Ÿäÿ≠ÿ® ŸÉÿ±ÿ© ÿßŸÑŸÇÿØŸÖ."
            ),
            FamilyMemberLesson(
                kurdishWord: "ke√ß",
                englishWord: "Daughter",
                arabicWord: "ÿßŸÑÿßÿ®ŸÜÿ©",
                kurdishExample: "Ke√ßa min √ß√Ærok√™n xwe dixw√Æne.",
                englishExample: "My daughter reads her stories.",
                arabicExample: "ÿßÿ®ŸÜÿ™Ÿä ÿ™ŸÇÿ±ÿ£ ŸÇÿµÿµŸáÿß."
            ),
            FamilyMemberLesson(
                kurdishWord: "biraz√Æ",
                englishWord: "Nephew",
                arabicWord: "ÿßÿ®ŸÜ ÿßŸÑÿ£ÿÆ",
                kurdishExample: "Biraziy√™ min li parka l√Æstik√™ ye.",
                englishExample: "My nephew is at the playground.",
                arabicExample: "ÿßÿ®ŸÜ ÿ£ÿÆŸä ŸÅŸä ÿßŸÑŸÖŸÑÿπÿ®."
            ),
            FamilyMemberLesson(
                kurdishWord: "xwarz√Æ",
                englishWord: "Niece",
                arabicWord: "ÿ®ŸÜÿ™ ÿßŸÑÿ£ÿÆÿ™",
                kurdishExample: "Xwarz√Æya min w√™neyek√Æ √ß√™dike.",
                englishExample: "My niece is drawing a picture.",
                arabicExample: "ÿ®ŸÜÿ™ ÿ£ÿÆÿ™Ÿä ÿ™ÿ±ÿ≥ŸÖ ÿµŸàÿ±ÿ©."
            )
        ]
    }
    
    /// Uploads family member lesson entries to Firestore
    func uploadFamilyMembersLessons() async throws {
        let familyLessons = getFamilyMembersLessons()
        let batch = db.batch()
        
        for lesson in familyLessons {
            let lessonEntry = LessonEntry(
                kurdishWord: lesson.kurdishWord,
                englishWord: lesson.englishWord,
                arabicWord: lesson.arabicWord,
                kurdishExample: lesson.kurdishExample,
                englishExample: lesson.englishExample,
                arabicExample: lesson.arabicExample,
                imageUrl: "", // Will be added manually later
                type: "lesson"
            )
            
            let docRef = db.collection("categories")
                .document("people_relationships")
                .collection("subcategories")
                .document("family_relationships")
                .collection("lessons")
                .document(lessonEntry.id)
            
            do {
                let encoder = Firestore.Encoder()
                let data = try encoder.encode(lessonEntry)
                batch.setData(data, forDocument: docRef)
            } catch {
                print("Error encoding family lesson: \(error)")
                throw error
            }
        }
        
        try await batch.commit()
        print("‚úÖ Uploaded \(familyLessons.count) family member lessons to people_relationships/family_relationships")
    }
    
    // MARK: - Greetings & Farewells Vocabulary Data
    
    /// Greetings & Farewells vocabulary for upload
    func getGreetingsFarewellsVocabulary() -> [VocabularyData] {
        return [
            VocabularyData(english: "Good morning", arabic: "ÿµÿ®ÿßÿ≠ ÿßŸÑÿÆŸäÿ±", kurdish: "Roj ba≈ü", pronunciation: "rohzh bahsh"),
            VocabularyData(english: "Good evening", arabic: "ŸÖÿ≥ÿßÿ° ÿßŸÑÿÆŸäÿ±", kurdish: "√ävar ba≈ü", pronunciation: "ay-vahr bahsh"),
            VocabularyData(english: "Good night", arabic: "ÿ™ÿµÿ®ÿ≠ ÿπŸÑŸâ ÿÆŸäÿ±", kurdish: "≈ûev ba≈ü", pronunciation: "shehv bahsh"),
            VocabularyData(english: "Goodbye", arabic: "ŸÖÿπ ÿßŸÑÿ≥ŸÑÿßŸÖÿ©", kurdish: "Bi xatir√™ te", pronunciation: "bee khah-tee-ray teh"),
            VocabularyData(english: "See you later", arabic: "ÿ£ÿ±ÿßŸÉ ŸÑÿßÿ≠ŸÇÿßŸã", kurdish: "D√Æsa em √™ bib√Ænin", pronunciation: "dee-sah ehm ay bee-bee-neen"),
            VocabularyData(english: "Sweet dreams", arabic: "ÿ£ÿ≠ŸÑÿßŸÖ ÿ≥ÿπŸäÿØÿ©", kurdish: "Xewn xwe≈ü", pronunciation: "kheh-oon khwehsh")
        ]
    }
    
    // MARK: - Greetings & Farewells Lesson Data
    
    /// Greetings & Farewells lesson entries for upload
    func getGreetingsFarewellsLessons() -> [FamilyMemberLesson] {
        return [
            FamilyMemberLesson(
                kurdishWord: "Roj ba≈ü",
                englishWord: "Good morning",
                arabicWord: "ÿµÿ®ÿßÿ≠ ÿßŸÑÿÆŸäÿ±",
                kurdishExample: "Roj ba≈ü, ez h√™v√Æ dikim roja te ba≈ü be.",
                englishExample: "Good morning, I hope you have a good day.",
                arabicExample: "ÿµÿ®ÿßÿ≠ ÿßŸÑÿÆŸäÿ±ÿå ÿ£ÿ™ŸÖŸÜŸâ ÿ£ŸÜ ŸäŸÉŸàŸÜ ŸäŸàŸÖŸÉ ÿ¨ŸÖŸäŸÑÿßŸã."
            ),
            FamilyMemberLesson(
                kurdishWord: "√ävar ba≈ü",
                englishWord: "Good evening",
                arabicWord: "ŸÖÿ≥ÿßÿ° ÿßŸÑÿÆŸäÿ±",
                kurdishExample: "√ävar ba≈ü, hevalno.",
                englishExample: "Good evening, my friend.",
                arabicExample: "ŸÖÿ≥ÿßÿ° ÿßŸÑÿÆŸäÿ±ÿå Ÿäÿß ÿµÿØŸäŸÇŸä."
            ),
            FamilyMemberLesson(
                kurdishWord: "≈ûev ba≈ü",
                englishWord: "Good night",
                arabicWord: "ÿ™ÿµÿ®ÿ≠ ÿπŸÑŸâ ÿÆŸäÿ±",
                kurdishExample: "≈ûev ba≈ü, xewa ≈üirin bib√Æ.",
                englishExample: "Good night, sweet dreams.",
                arabicExample: "ÿ™ÿµÿ®ÿ≠ ÿπŸÑŸâ ÿÆŸäÿ±ÿå ÿ£ÿ≠ŸÑÿßŸÖ ÿ≥ÿπŸäÿØÿ©."
            ),
            FamilyMemberLesson(
                kurdishWord: "Bi xatir√™ te",
                englishWord: "Goodbye",
                arabicWord: "ŸÖÿπ ÿßŸÑÿ≥ŸÑÿßŸÖÿ©",
                kurdishExample: "Ez di√ßim, bi xatir√™ te.",
                englishExample: "I'm leaving, goodbye.",
                arabicExample: "ÿ£ŸÜÿß ÿ∞ÿßŸáÿ®ÿå ŸÖÿπ ÿßŸÑÿ≥ŸÑÿßŸÖÿ©."
            ),
            FamilyMemberLesson(
                kurdishWord: "D√Æsa em √™ bib√Ænin",
                englishWord: "See you later",
                arabicWord: "ÿ£ÿ±ÿßŸÉ ŸÑÿßÿ≠ŸÇÿßŸã",
                kurdishExample: "D√Æsa em √™ bib√Ænin, heval.",
                englishExample: "See you later, friend.",
                arabicExample: "ÿ£ÿ±ÿßŸÉ ŸÑÿßÿ≠ŸÇÿßŸãÿå Ÿäÿß ÿµÿØŸäŸÇ."
            ),
            FamilyMemberLesson(
                kurdishWord: "Xewn xwe≈ü",
                englishWord: "Sweet dreams",
                arabicWord: "ÿ£ÿ≠ŸÑÿßŸÖ ÿ≥ÿπŸäÿØÿ©",
                kurdishExample: "≈ûev ba≈ü √ª xewn√™n xwe≈ü.",
                englishExample: "Good night and sweet dreams.",
                arabicExample: "ÿ™ÿµÿ®ÿ≠ ÿπŸÑŸâ ÿÆŸäÿ± Ÿàÿ£ÿ≠ŸÑÿßŸÖ ÿ≥ÿπŸäÿØÿ©."
            )
        ]
    }
    
    /// Uploads greetings & farewells lesson entries to Firestore
    func uploadGreetingsFarewellsLessons() async throws {
        let greetingsLessons = getGreetingsFarewellsLessons()
        let batch = db.batch()
        
        for lesson in greetingsLessons {
            let lessonEntry = LessonEntry(
                kurdishWord: lesson.kurdishWord,
                englishWord: lesson.englishWord,
                arabicWord: lesson.arabicWord,
                kurdishExample: lesson.kurdishExample,
                englishExample: lesson.englishExample,
                arabicExample: lesson.arabicExample,
                imageUrl: "", // Will be added manually later
                type: "lesson"
            )
            
            let docRef = db.collection("categories")
                .document("greetings_essentials")
                .collection("subcategories")
                .document("greetings_farewells")
                .collection("lessons")
                .document(lessonEntry.id)
            
            do {
                let encoder = Firestore.Encoder()
                let data = try encoder.encode(lessonEntry)
                batch.setData(data, forDocument: docRef)
            } catch {
                print("Error encoding greetings lesson: \(error)")
                throw error
            }
        }
        
        try await batch.commit()
        print("‚úÖ Uploaded \(greetingsLessons.count) greetings & farewells lessons to greetings_essentials/greetings_farewells")
    }
    
    // MARK: - Polite Phrases Vocabulary Data
    
    /// Polite Phrases vocabulary for upload
    func getPolitePhrasesVocabulary() -> [VocabularyData] {
        return [
            VocabularyData(english: "Please", arabic: "ŸÖŸÜ ŸÅÿ∂ŸÑŸÉ", kurdish: "Ji kerema xwe", pronunciation: "zhee keh-reh-mah khweh"),
            VocabularyData(english: "Thank you", arabic: "ÿ¥ŸÉÿ±ÿßŸã", kurdish: "Spas", pronunciation: "spahs"),
            VocabularyData(english: "You're welcome", arabic: "ÿπŸÑŸâ ÿßŸÑÿ±ÿ≠ÿ® ŸàÿßŸÑÿ≥ÿπÿ©", kurdish: "Ser √ßavan", pronunciation: "sehr cha-vahn"),
            VocabularyData(english: "Sorry", arabic: "ÿ¢ÿ≥ŸÅ", kurdish: "Bibor√Æ", pronunciation: "bee-boh-ree"),
            VocabularyData(english: "Excuse me", arabic: "ÿßŸÑŸÖÿπÿ∞ÿ±ÿ©", kurdish: "Bibor√Æ", pronunciation: "bee-boh-ree"),
            VocabularyData(english: "No problem", arabic: "ŸÑÿß ŸÖÿ¥ŸÉŸÑÿ©", kurdish: "pirsgir√™k tune", pronunciation: "peer-sah too-neh")
        ]
    }
    
    // MARK: - Polite Phrases Lesson Data
    
    /// Polite Phrases lesson entries for upload
    func getPolitePhrasesLessons() -> [FamilyMemberLesson] {
        return [
            FamilyMemberLesson(
                kurdishWord: "Ji kerema xwe",
                englishWord: "Please",
                arabicWord: "ŸÖŸÜ ŸÅÿ∂ŸÑŸÉ",
                kurdishExample: "Ji kerema xwe, ez dixwazim bi te re biaxivim.",
                englishExample: "Please, I want to speak with you.",
                arabicExample: "ŸÖŸÜ ŸÅÿ∂ŸÑŸÉÿå ÿ£ÿ±ŸäÿØ ÿ£ŸÜ ÿ£ÿ™ÿ≠ÿØÿ´ ŸÖÿπŸÉ."
            ),
            FamilyMemberLesson(
                kurdishWord: "Spas",
                englishWord: "Thank you",
                arabicWord: "ÿ¥ŸÉÿ±ÿßŸã",
                kurdishExample: "Spas bo al√Ækariy√™ te.",
                englishExample: "Thank you for your help.",
                arabicExample: "ÿ¥ŸÉÿ±ÿßŸã ŸÑŸÖÿ≥ÿßÿπÿØÿ™ŸÉ."
            ),
            FamilyMemberLesson(
                kurdishWord: "Ser √ßavan",
                englishWord: "You're welcome",
                arabicWord: "ÿπŸÑŸâ ÿßŸÑÿ±ÿ≠ÿ® ŸàÿßŸÑÿ≥ÿπÿ©",
                kurdishExample: "Ser √ßavan, tu her dikar√Æ bipirse.",
                englishExample: "You're welcome, you can always ask.",
                arabicExample: "ÿπŸÑŸâ ÿßŸÑÿ±ÿ≠ÿ® ŸàÿßŸÑÿ≥ÿπÿ©ÿå ŸäŸÖŸÉŸÜŸÉ ÿ£ŸÜ ÿ™ÿ≥ÿ£ŸÑ ÿØÿßÿ¶ŸÖÿßŸã."
            ),
            FamilyMemberLesson(
                kurdishWord: "Bibor√Æ",
                englishWord: "Sorry",
                arabicWord: "ÿ¢ÿ≥ŸÅ",
                kurdishExample: "Bibor√Æ, ez ≈üa≈ü√Æ kirim.",
                englishExample: "Sorry, I made a mistake.",
                arabicExample: "ÿ¢ÿ≥ŸÅÿå ŸÑŸÇÿØ ÿ£ÿÆÿ∑ÿ£ÿ™."
            ),
            FamilyMemberLesson(
                kurdishWord: "Bibor√Æ",
                englishWord: "Excuse me",
                arabicWord: "ÿßŸÑŸÖÿπÿ∞ÿ±ÿ©",
                kurdishExample: "Bibor√Æ, ez dixwazim derkevim.",
                englishExample: "Excuse me, I want to leave.",
                arabicExample: "ÿßŸÑŸÖÿπÿ∞ÿ±ÿ©ÿå ÿ£ÿ±ŸäÿØ ÿ£ŸÜ ÿ£ÿ∫ÿßÿØÿ±."
            ),
            FamilyMemberLesson(
                kurdishWord: "pirsgir√™k tune",
                englishWord: "No problem",
                arabicWord: "ŸÑÿß ŸÖÿ¥ŸÉŸÑÿ©",
                kurdishExample: "pirsgir√™k tune, ez dikarim al√Ækariya te bikim.",
                englishExample: "No problem, I can help you.",
                arabicExample: "ŸÑÿß ŸÖÿ¥ŸÉŸÑÿ©ÿå ŸäŸÖŸÉŸÜŸÜŸä ŸÖÿ≥ÿßÿπÿØÿ™ŸÉ."
            )
        ]
    }
    
    /// Uploads polite phrases lesson entries to Firestore
    func uploadPolitePhrasesLessons() async throws {
        let politeLessons = getPolitePhrasesLessons()
        let batch = db.batch()
        
        for lesson in politeLessons {
            let lessonEntry = LessonEntry(
                kurdishWord: lesson.kurdishWord,
                englishWord: lesson.englishWord,
                arabicWord: lesson.arabicWord,
                kurdishExample: lesson.kurdishExample,
                englishExample: lesson.englishExample,
                arabicExample: lesson.arabicExample,
                imageUrl: "", // Will be added manually later
                type: "lesson"
            )
            
            let docRef = db.collection("categories")
                .document("greetings_essentials")
                .collection("subcategories")
                .document("polite_phrases")
                .collection("lessons")
                .document(lessonEntry.id)
            
            do {
                let encoder = Firestore.Encoder()
                let data = try encoder.encode(lessonEntry)
                batch.setData(data, forDocument: docRef)
            } catch {
                print("Error encoding polite phrases lesson: \(error)")
                throw error
            }
        }
        
        try await batch.commit()
        print("‚úÖ Uploaded \(politeLessons.count) polite phrases lessons to greetings_essentials/polite_phrases")
    }
    
    // MARK: - Introductions Vocabulary Data
    
    /// Introductions vocabulary for upload
    func getIntroductionsVocabulary() -> [VocabularyData] {
        return [
            VocabularyData(english: "What's your name?", arabic: "ŸÖÿß ÿßÿ≥ŸÖŸÉÿü", kurdish: "Nav√™ te √ßi ye?", pronunciation: "nah-vay teh chee yeh"),
            VocabularyData(english: "My name is‚Ä¶", arabic: "ÿßÿ≥ŸÖŸä...", kurdish: "Nav√™ min ... e", pronunciation: "nah-vay meen ... eh"),
            VocabularyData(english: "Nice to meet you", arabic: "ÿ™ÿ¥ÿ±ŸÅŸÜÿß", kurdish: "Ez k√™fxwe≈ü b√ªm ku te nas kirim", pronunciation: "ehz kayf-khwehsh boom koo teh nahs kee-reem"),
            VocabularyData(english: "Where are you from?", arabic: "ŸÖŸÜ ÿ£ŸäŸÜ ÿ£ŸÜÿ™ÿü", kurdish: "Tu ji ku der√™ y√Æ?", pronunciation: "too zhee koo deh-ray yee"),
            VocabularyData(english: "I'm from...", arabic: "ÿ£ŸÜÿß ŸÖŸÜ...", kurdish: "Ez ji ... me", pronunciation: "ehz zhee ... meh")
        ]
    }
    
    // MARK: - Introductions Lesson Data
    
    /// Introductions lesson entries for upload
    func getIntroductionsLessons() -> [FamilyMemberLesson] {
        return [
            FamilyMemberLesson(
                kurdishWord: "Nav√™ te √ßi ye?",
                englishWord: "What's your name?",
                arabicWord: "ŸÖÿß ÿßÿ≥ŸÖŸÉÿü",
                kurdishExample: "Nav√™ te √ßi ye?",
                englishExample: "What's your name?",
                arabicExample: "ŸÖÿß ÿßÿ≥ŸÖŸÉÿü"
            ),
            FamilyMemberLesson(
                kurdishWord: "Nav√™ min ... e",
                englishWord: "My name is‚Ä¶",
                arabicWord: "ÿßÿ≥ŸÖŸä...",
                kurdishExample: "Nav√™ min Bano ye.",
                englishExample: "My name is Bano.",
                arabicExample: "ÿßÿ≥ŸÖŸä ÿ®ÿßŸÜŸà."
            ),
            FamilyMemberLesson(
                kurdishWord: "Ez k√™fxwe≈ü b√ªm ku te nas kirim",
                englishWord: "Nice to meet you",
                arabicWord: "ÿ™ÿ¥ÿ±ŸÅŸÜÿß",
                kurdishExample: "Ez k√™fxwe≈ü b√ªm ku te nas kirim.",
                englishExample: "Nice to meet you.",
                arabicExample: "ÿ™ÿ¥ÿ±ŸÅŸÜÿß."
            ),
            FamilyMemberLesson(
                kurdishWord: "Tu ji ku der√™ y√Æ?",
                englishWord: "Where are you from?",
                arabicWord: "ŸÖŸÜ ÿ£ŸäŸÜ ÿ£ŸÜÿ™ÿü",
                kurdishExample: "Tu ji ku der√™ y√Æ? Ez ji Afr√Æn√™ me.",
                englishExample: "Where are you from? I am from Afrin.",
                arabicExample: "ŸÖŸÜ ÿ£ŸäŸÜ ÿ£ŸÜÿ™ÿü ÿ£ŸÜÿß ŸÖŸÜ ÿπŸÅÿ±ŸäŸÜ."
            ),
            FamilyMemberLesson(
                kurdishWord: "Ez ji ... me",
                englishWord: "I'm from...",
                arabicWord: "ÿ£ŸÜÿß ŸÖŸÜ...",
                kurdishExample: "Ez ji S√ªriy√™ me.",
                englishExample: "I'm from Syria.",
                arabicExample: "ÿ£ŸÜÿß ŸÖŸÜ ÿ≥Ÿàÿ±Ÿäÿß."
            )
        ]
    }
    
    /// Uploads introductions lesson entries to Firestore
    func uploadIntroductionsLessons() async throws {
        let introductionsLessons = getIntroductionsLessons()
        let batch = db.batch()
        
        for lesson in introductionsLessons {
            let lessonEntry = LessonEntry(
                kurdishWord: lesson.kurdishWord,
                englishWord: lesson.englishWord,
                arabicWord: lesson.arabicWord,
                kurdishExample: lesson.kurdishExample,
                englishExample: lesson.englishExample,
                arabicExample: lesson.arabicExample,
                imageUrl: "", // Will be added manually later
                type: "lesson"
            )
            
            let docRef = db.collection("categories")
                .document("greetings_essentials")
                .collection("subcategories")
                .document("introductions")
                .collection("lessons")
                .document(lessonEntry.id)
            
            do {
                let encoder = Firestore.Encoder()
                let data = try encoder.encode(lessonEntry)
                batch.setData(data, forDocument: docRef)
            } catch {
                print("Error encoding introductions lesson: \(error)")
                throw error
            }
        }
        
        try await batch.commit()
        print("‚úÖ Uploaded \(introductionsLessons.count) introductions lessons to greetings_essentials/introductions")
    }
    
    // MARK: - Basic Questions Vocabulary Data
    
    /// Basic Questions vocabulary for upload
    func getBasicQuestionsVocabulary() -> [VocabularyData] {
        return [
            VocabularyData(english: "How are you?", arabic: "ŸÉŸäŸÅ ÿ≠ÿßŸÑŸÉÿü", kurdish: "Tu √ßawa y√Æ?", pronunciation: "too cha-wah yee"),
            VocabularyData(english: "I'm fine, thanks", arabic: "ÿ£ŸÜÿß ÿ®ÿÆŸäÿ±ÿå ÿ¥ŸÉÿ±ÿßŸã", kurdish: "Ez ba≈ü im, spas", pronunciation: "ehz bahsh eem spahs"),
            VocabularyData(english: "And you?", arabic: "Ÿàÿ£ŸÜÿ™ÿü", kurdish: "Tu √ßi?", pronunciation: "too chee"),
            VocabularyData(english: "Do you speak Kurdish?", arabic: "ŸáŸÑ ÿ™ÿ™ÿ≠ÿØÿ´ ÿßŸÑŸÉÿ±ÿØŸäÿ©ÿü", kurdish: "Tu bi Kurd√Æ diaxiv√Æ?", pronunciation: "too bee koor-dee dee-ah-khee-vee"),
            VocabularyData(english: "A little", arabic: "ŸÇŸÑŸäŸÑÿßŸã", kurdish: "Hinek", pronunciation: "hee-nehk"),
            VocabularyData(english: "I don't understand", arabic: "ŸÑÿß ÿ£ŸÅŸáŸÖ", kurdish: "Ez nizanim", pronunciation: "ehz nee-zah-neem")
        ]
    }
    
    // MARK: - Basic Questions Lesson Data
    
    /// Basic Questions lesson entries for upload
    func getBasicQuestionsLessons() -> [FamilyMemberLesson] {
        return [
            FamilyMemberLesson(
                kurdishWord: "Tu √ßawa y√Æ?",
                englishWord: "How are you?",
                arabicWord: "ŸÉŸäŸÅ ÿ≠ÿßŸÑŸÉÿü",
                kurdishExample: "Tu √ßawa y√Æ, hevalno?",
                englishExample: "How are you, my friend?",
                arabicExample: "ŸÉŸäŸÅ ÿ≠ÿßŸÑŸÉÿå Ÿäÿß ÿµÿØŸäŸÇŸäÿü"
            ),
            FamilyMemberLesson(
                kurdishWord: "Ez ba≈ü im, spas",
                englishWord: "I'm fine, thanks",
                arabicWord: "ÿ£ŸÜÿß ÿ®ÿÆŸäÿ±ÿå ÿ¥ŸÉÿ±ÿßŸã",
                kurdishExample: "Ez ba≈ü im, spas bo pirs√™ te.",
                englishExample: "I'm fine, thanks for asking.",
                arabicExample: "ÿ£ŸÜÿß ÿ®ÿÆŸäÿ±ÿå ÿ¥ŸÉÿ±ÿßŸã ŸÑÿ≥ÿ§ÿßŸÑŸÉ."
            ),
            FamilyMemberLesson(
                kurdishWord: "Tu √ßi?",
                englishWord: "And you?",
                arabicWord: "Ÿàÿ£ŸÜÿ™ÿü",
                kurdishExample: "Ez ba≈ü im. Tu √ßi?",
                englishExample: "I'm fine. And you?",
                arabicExample: "ÿ£ŸÜÿß ÿ®ÿÆŸäÿ±. Ÿàÿ£ŸÜÿ™ÿü"
            ),
            FamilyMemberLesson(
                kurdishWord: "Tu bi Kurd√Æ diaxiv√Æ?",
                englishWord: "Do you speak Kurdish?",
                arabicWord: "ŸáŸÑ ÿ™ÿ™ÿ≠ÿØÿ´ ÿßŸÑŸÉÿ±ÿØŸäÿ©ÿü",
                kurdishExample: "Tu bi Kurd√Æ diaxiv√Æ an bi Tirk√Æ?",
                englishExample: "Do you speak Kurdish or Turkish?",
                arabicExample: "ŸáŸÑ ÿ™ÿ™ÿ≠ÿØÿ´ ÿßŸÑŸÉÿ±ÿØŸäÿ© ÿ£ŸÖ ÿßŸÑÿ™ÿ±ŸÉŸäÿ©ÿü"
            ),
            FamilyMemberLesson(
                kurdishWord: "Hinek",
                englishWord: "A little",
                arabicWord: "ŸÇŸÑŸäŸÑÿßŸã",
                kurdishExample: "Ez bi Kurd√Æ hinek dizanim.",
                englishExample: "I know a little Kurdish.",
                arabicExample: "ÿ£ÿπÿ±ŸÅ ÿßŸÑŸÇŸÑŸäŸÑ ŸÖŸÜ ÿßŸÑŸÉÿ±ÿØŸäÿ©."
            ),
            FamilyMemberLesson(
                kurdishWord: "Ez nizanim",
                englishWord: "I don't understand",
                arabicWord: "ŸÑÿß ÿ£ŸÅŸáŸÖ",
                kurdishExample: "Bibor√Æ, ez ev nab√Ænim.",
                englishExample: "Sorry, I don't understand this.",
                arabicExample: "ÿ¢ÿ≥ŸÅÿå ŸÑÿß ÿ£ŸÅŸáŸÖ Ÿáÿ∞ÿß."
            )
        ]
    }
    
    /// Uploads basic questions lesson entries to Firestore
    func uploadBasicQuestionsLessons() async throws {
        let basicQuestionsLessons = getBasicQuestionsLessons()
        let batch = db.batch()
        
        for lesson in basicQuestionsLessons {
            let lessonEntry = LessonEntry(
                kurdishWord: lesson.kurdishWord,
                englishWord: lesson.englishWord,
                arabicWord: lesson.arabicWord,
                kurdishExample: lesson.kurdishExample,
                englishExample: lesson.englishExample,
                arabicExample: lesson.arabicExample,
                imageUrl: "", // Will be added manually later
                type: "lesson"
            )
            
            let docRef = db.collection("categories")
                .document("greetings_essentials")
                .collection("subcategories")
                .document("basic_questions")
                .collection("lessons")
                .document(lessonEntry.id)
            
            do {
                let encoder = Firestore.Encoder()
                let data = try encoder.encode(lessonEntry)
                batch.setData(data, forDocument: docRef)
            } catch {
                print("Error encoding basic questions lesson: \(error)")
                throw error
            }
        }
        
        try await batch.commit()
        print("‚úÖ Uploaded \(basicQuestionsLessons.count) basic questions lessons to greetings_essentials/basic_questions")
    }
    
    // MARK: - Yes/No & Confirmation Vocabulary Data
    
    /// Yes/No & Confirmation vocabulary for upload
    func getYesNoConfirmationVocabulary() -> [VocabularyData] {
        return [
            VocabularyData(english: "Yes", arabic: "ŸÜÿπŸÖ", kurdish: "Er√™", pronunciation: "eh-ray"),
            VocabularyData(english: "No", arabic: "ŸÑÿß", kurdish: "Na", pronunciation: "nah"),
            VocabularyData(english: "Maybe", arabic: "ÿ±ÿ®ŸÖÿß", kurdish: "Dibe", pronunciation: "dee-beh"),
            VocabularyData(english: "OK", arabic: "ÿ≠ÿ≥ŸÜÿßŸã", kurdish: "Ba≈ü e", pronunciation: "bahsh eh"),
            VocabularyData(english: "I don't know", arabic: "ŸÑÿß ÿ£ÿπÿ±ŸÅ", kurdish: "Ez nizanim", pronunciation: "ehz nee-zah-neem")
        ]
    }
    
    // MARK: - Yes/No & Confirmation Lesson Data
    
    /// Yes/No & Confirmation lesson entries for upload
    func getYesNoConfirmationLessons() -> [FamilyMemberLesson] {
        return [
            FamilyMemberLesson(
                kurdishWord: "Er√™",
                englishWord: "Yes",
                arabicWord: "ŸÜÿπŸÖ",
                kurdishExample: "Er√™, ez √™ were.",
                englishExample: "Yes, I will come.",
                arabicExample: "ŸÜÿπŸÖÿå ÿ≥ÿ£ÿ≠ÿ∂ÿ±."
            ),
            FamilyMemberLesson(
                kurdishWord: "Na",
                englishWord: "No",
                arabicWord: "ŸÑÿß",
                kurdishExample: "Na, ez ne√ßarim.",
                englishExample: "No, I can't.",
                arabicExample: "ŸÑÿßÿå ŸÑÿß ÿ£ÿ≥ÿ™ÿ∑Ÿäÿπ."
            ),
            FamilyMemberLesson(
                kurdishWord: "Dibe",
                englishWord: "Maybe",
                arabicWord: "ÿ±ÿ®ŸÖÿß",
                kurdishExample: "Dibe ez √™ t√™bim.",
                englishExample: "Maybe I'll join.",
                arabicExample: "ÿ±ÿ®ŸÖÿß ÿ≥ÿ£ŸÜÿ∂ŸÖ."
            ),
            FamilyMemberLesson(
                kurdishWord: "Ba≈ü e",
                englishWord: "OK",
                arabicWord: "ÿ≠ÿ≥ŸÜÿßŸã",
                kurdishExample: "Ba≈ü e, em √™ destp√™ bikin.",
                englishExample: "OK, let's start.",
                arabicExample: "ÿ≠ÿ≥ŸÜÿßŸãÿå ÿØÿπŸàŸÜÿß ŸÜÿ®ÿØÿ£."
            ),
            FamilyMemberLesson(
                kurdishWord: "Ez nizanim",
                englishWord: "I don't know",
                arabicWord: "ŸÑÿß ÿ£ÿπÿ±ŸÅ",
                kurdishExample: "Ez nizanim ku ew li ku ye.",
                englishExample: "I don't know where he is.",
                arabicExample: "ŸÑÿß ÿ£ÿπÿ±ŸÅ ÿ£ŸäŸÜ ŸáŸà."
            )
        ]
    }
    
    /// Uploads yes/no & confirmation lesson entries to Firestore
    func uploadYesNoConfirmationLessons() async throws {
        let yesNoLessons = getYesNoConfirmationLessons()
        let batch = db.batch()
        
        for lesson in yesNoLessons {
            let lessonEntry = LessonEntry(
                kurdishWord: lesson.kurdishWord,
                englishWord: lesson.englishWord,
                arabicWord: lesson.arabicWord,
                kurdishExample: lesson.kurdishExample,
                englishExample: lesson.englishExample,
                arabicExample: lesson.arabicExample,
                imageUrl: "", // Will be added manually later
                type: "lesson"
            )
            
            let docRef = db.collection("categories")
                .document("greetings_essentials")
                .collection("subcategories")
                .document("yes_no_confirmation")
                .collection("lessons")
                .document(lessonEntry.id)
            
            do {
                let encoder = Firestore.Encoder()
                let data = try encoder.encode(lessonEntry)
                batch.setData(data, forDocument: docRef)
            } catch {
                print("Error encoding yes/no confirmation lesson: \(error)")
                throw error
            }
        }
        
        try await batch.commit()
        print("‚úÖ Uploaded \(yesNoLessons.count) yes/no & confirmation lessons to greetings_essentials/yes_no_confirmation")
    }
    
    // MARK: - Batch Upload Function
    
    /// Complete setup function that creates categories, subcategories, and uploads family vocabulary
    func setupCompleteDatabase() async throws {
        print("üöÄ Starting complete database setup...")
        
        // Step 1: Create categories
        try await setupInitialCategories()
        
        // Step 2: Create subcategories for People & Relationships
        try await setupPeopleRelationshipsSubcategories()
        
        // Step 3: Upload family relationships vocabulary
        let familyVocab = getFamilyRelationshipsVocabulary()
        try await uploadVocabulary(
            categoryId: "people_relationships",
            subcategoryId: "family_relationships",
            vocabularyList: familyVocab
        )
        
        // Step 4: Upload family member lessons
        try await uploadFamilyMembersLessons()
        
        // Step 5: Upload greetings & farewells vocabulary
        let greetingsVocab = getGreetingsFarewellsVocabulary()
        try await uploadVocabulary(
            categoryId: "greetings_essentials",
            subcategoryId: "greetings_farewells",
            vocabularyList: greetingsVocab
        )
        
        // Step 6: Upload greetings & farewells lessons
        try await uploadGreetingsFarewellsLessons()
        
        // Step 7: Upload polite phrases vocabulary
        let politeVocab = getPolitePhrasesVocabulary()
        try await uploadVocabulary(
            categoryId: "greetings_essentials",
            subcategoryId: "polite_phrases",
            vocabularyList: politeVocab
        )
        
        // Step 8: Upload polite phrases lessons
        try await uploadPolitePhrasesLessons()
        
        // Step 9: Upload introductions vocabulary
        let introductionsVocab = getIntroductionsVocabulary()
        try await uploadVocabulary(
            categoryId: "greetings_essentials",
            subcategoryId: "introductions",
            vocabularyList: introductionsVocab
        )
        
        // Step 10: Upload introductions lessons
        try await uploadIntroductionsLessons()
        
        // Step 11: Upload basic questions vocabulary
        let basicQuestionsVocab = getBasicQuestionsVocabulary()
        try await uploadVocabulary(
            categoryId: "greetings_essentials",
            subcategoryId: "basic_questions",
            vocabularyList: basicQuestionsVocab
        )
        
        // Step 12: Upload basic questions lessons
        try await uploadBasicQuestionsLessons()
        
        // Step 13: Upload yes/no & confirmation vocabulary
        let yesNoVocab = getYesNoConfirmationVocabulary()
        try await uploadVocabulary(
            categoryId: "greetings_essentials",
            subcategoryId: "yes_no_confirmation",
            vocabularyList: yesNoVocab
        )
        
        // Step 14: Upload yes/no & confirmation lessons
        try await uploadYesNoConfirmationLessons()
        
        print("üéâ Complete database setup finished successfully!")
        print("üìä Total uploaded: \(familyVocab.count) family vocabulary entries + 15 family member lessons + 6 greetings & farewells vocabulary entries + 6 greetings & farewells lessons + 6 polite phrases vocabulary entries + 6 polite phrases lessons + 5 introductions vocabulary entries + 5 introductions lessons + 6 basic questions vocabulary entries + 6 basic questions lessons + 5 yes/no & confirmation vocabulary entries + 5 yes/no & confirmation lessons")
    }
}

// MARK: - Usage Examples and Helper Functions

extension FirestoreVocabularyManager {
    
    /// Example function showing how to upload custom vocabulary
    func uploadCustomVocabulary() async throws {
        let customVocab = [
            VocabularyData(english: "hello", arabic: "ŸÖÿ±ÿ≠ÿ®ÿß", kurdish: "silav", pronunciation: "see-lahv"),
            VocabularyData(english: "goodbye", arabic: "ŸàÿØÿßÿπÿß", kurdish: "xatir√™ te", pronunciation: "khah-tee-ray teh"),
            VocabularyData(english: "thank you", arabic: "ÿ¥ŸÉÿ±ÿß", kurdish: "spas", pronunciation: "spahs"),
            VocabularyData(english: "please", arabic: "ŸÖŸÜ ŸÅÿ∂ŸÑŸÉ", kurdish: "ji kerema xwe", pronunciation: "zhee keh-reh-mah khweh")
        ]
        
        try await uploadVocabulary(
            categoryId: "people_relationships",
            subcategoryId: "greetings",
            vocabularyList: customVocab
        )
    }
    
    /// Function to fetch vocabulary for testing
    func fetchVocabulary(categoryId: String, subcategoryId: String) async throws -> [VocabularyEntry] {
        let snapshot = try await db.collection("categories")
            .document(categoryId)
            .collection("subcategories")
            .document(subcategoryId)
            .collection("vocabulary")
            .order(by: "english")
            .getDocuments()
        
        return snapshot.documents.compactMap { document in
            do {
                let data = document.data()
                let decoder = Firestore.Decoder()
                return try decoder.decode(VocabularyEntry.self, from: data)
            } catch {
                print("Error decoding vocabulary entry: \(error)")
                return nil
            }
        }
    }
} 